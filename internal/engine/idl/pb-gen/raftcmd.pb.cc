// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raftcmd.proto

#include "raftcmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace vearchpb {
PROTOBUF_CONSTEXPR PartitionData::PartitionData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.messageid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.search_request_)*/nullptr
  , /*decltype(_impl_.search_response_)*/nullptr
  , /*decltype(_impl_.err_)*/nullptr
  , /*decltype(_impl_.del_by_query_response_)*/nullptr
  , /*decltype(_impl_.index_request_)*/nullptr
  , /*decltype(_impl_.index_response_)*/nullptr
  , /*decltype(_impl_.query_request_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.partitionid_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartitionDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartitionDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartitionDataDefaultTypeInternal() {}
  union {
    PartitionData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartitionDataDefaultTypeInternal _PartitionData_default_instance_;
PROTOBUF_CONSTEXPR UpdateSpace::UpdateSpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.space_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateSpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateSpaceDefaultTypeInternal() {}
  union {
    UpdateSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateSpaceDefaultTypeInternal _UpdateSpace_default_instance_;
PROTOBUF_CONSTEXPR DocCmd::DocCmd(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.docs_)*/{}
  , /*decltype(_impl_.doc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/int64_t{0}
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.slot_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DocCmdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DocCmdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DocCmdDefaultTypeInternal() {}
  union {
    DocCmd _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DocCmdDefaultTypeInternal _DocCmd_default_instance_;
PROTOBUF_CONSTEXPR RaftCommand::RaftCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.write_command_)*/nullptr
  , /*decltype(_impl_.update_space_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RaftCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RaftCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RaftCommandDefaultTypeInternal() {}
  union {
    RaftCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RaftCommandDefaultTypeInternal _RaftCommand_default_instance_;
PROTOBUF_CONSTEXPR SnapData::SnapData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapDataDefaultTypeInternal() {}
  union {
    SnapData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapDataDefaultTypeInternal _SnapData_default_instance_;
}  // namespace vearchpb
static ::_pb::Metadata file_level_metadata_raftcmd_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_raftcmd_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_raftcmd_2eproto = nullptr;

const uint32_t TableStruct_raftcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.partitionid_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.messageid_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.items_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.search_request_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.search_response_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.err_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.del_by_query_response_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.index_request_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.index_response_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::PartitionData, _impl_.query_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::UpdateSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::UpdateSpace, _impl_.space_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::UpdateSpace, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DocCmd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::DocCmd, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DocCmd, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DocCmd, _impl_.slot_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DocCmd, _impl_.doc_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::DocCmd, _impl_.docs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RaftCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::RaftCommand, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RaftCommand, _impl_.write_command_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::RaftCommand, _impl_.update_space_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SnapData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::vearchpb::SnapData, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::vearchpb::SnapData, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::vearchpb::PartitionData)},
  { 18, -1, -1, sizeof(::vearchpb::UpdateSpace)},
  { 26, -1, -1, sizeof(::vearchpb::DocCmd)},
  { 37, -1, -1, sizeof(::vearchpb::RaftCommand)},
  { 46, -1, -1, sizeof(::vearchpb::SnapData)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::vearchpb::_PartitionData_default_instance_._instance,
  &::vearchpb::_UpdateSpace_default_instance_._instance,
  &::vearchpb::_DocCmd_default_instance_._instance,
  &::vearchpb::_RaftCommand_default_instance_._instance,
  &::vearchpb::_SnapData_default_instance_._instance,
};

const char descriptor_table_protodef_raftcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rraftcmd.proto\022\010vearchpb\032\014errors.proto\032"
  "\020data_model.proto\032\021router_grpc.proto\"\323\003\n"
  "\rPartitionData\022\036\n\004type\030\001 \001(\0162\020.vearchpb."
  "OpType\022\023\n\013partitionID\030\002 \001(\r\022\021\n\tmessageID"
  "\030\003 \001(\t\022\035\n\005items\030\004 \003(\0132\016.vearchpb.Item\022/\n"
  "\016search_request\030\005 \001(\0132\027.vearchpb.SearchR"
  "equest\0221\n\017search_response\030\006 \001(\0132\030.vearch"
  "pb.SearchResponse\022\014\n\004data\030\007 \001(\014\022\034\n\003err\030\010"
  " \001(\0132\017.vearchpb.Error\022<\n\025del_by_query_re"
  "sponse\030\t \001(\0132\035.vearchpb.DelByQueryeRespo"
  "nse\022-\n\rindex_request\030\n \001(\0132\026.vearchpb.In"
  "dexRequest\022/\n\016index_response\030\013 \001(\0132\027.vea"
  "rchpb.IndexResponse\022-\n\rquery_request\030\014 \001"
  "(\0132\026.vearchpb.QueryRequest\"-\n\013UpdateSpac"
  "e\022\r\n\005Space\030\001 \001(\014\022\017\n\007version\030\002 \001(\004\"b\n\006Doc"
  "Cmd\022\036\n\004type\030\001 \001(\0162\020.vearchpb.OpType\022\017\n\007v"
  "ersion\030\003 \001(\003\022\014\n\004slot\030\005 \001(\r\022\013\n\003doc\030\007 \001(\014\022"
  "\014\n\004docs\030\010 \003(\014\"\204\001\n\013RaftCommand\022\037\n\004type\030\001 "
  "\001(\0162\021.vearchpb.CmdType\022\'\n\rwrite_command\030"
  "\002 \001(\0132\020.vearchpb.DocCmd\022+\n\014update_space\030"
  "\003 \001(\0132\025.vearchpb.UpdateSpace\"&\n\010SnapData"
  "\022\013\n\003key\030\001 \001(\014\022\r\n\005value\030\002 \001(\014*\?\n\006OpType\022\n"
  "\n\006CREATE\020\000\022\n\n\006DELETE\020\001\022\010\n\004BULK\020\002\022\007\n\003GET\020"
  "\003\022\n\n\006SEARCH\020\004*\?\n\007CmdType\022\t\n\005WRITE\020\000\022\017\n\013U"
  "PDATESPACE\020\001\022\t\n\005FLUSH\020\002\022\r\n\tSEARCHDEL\020\003B\016"
  "H\001Z\n./vearchpbb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_raftcmd_2eproto_deps[3] = {
  &::descriptor_table_data_5fmodel_2eproto,
  &::descriptor_table_errors_2eproto,
  &::descriptor_table_router_5fgrpc_2eproto,
};
static ::_pbi::once_flag descriptor_table_raftcmd_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_raftcmd_2eproto = {
    false, false, 1022, descriptor_table_protodef_raftcmd_2eproto,
    "raftcmd.proto",
    &descriptor_table_raftcmd_2eproto_once, descriptor_table_raftcmd_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_raftcmd_2eproto::offsets,
    file_level_metadata_raftcmd_2eproto, file_level_enum_descriptors_raftcmd_2eproto,
    file_level_service_descriptors_raftcmd_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_raftcmd_2eproto_getter() {
  return &descriptor_table_raftcmd_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_raftcmd_2eproto(&descriptor_table_raftcmd_2eproto);
namespace vearchpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* OpType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raftcmd_2eproto);
  return file_level_enum_descriptors_raftcmd_2eproto[0];
}
bool OpType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_raftcmd_2eproto);
  return file_level_enum_descriptors_raftcmd_2eproto[1];
}
bool CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class PartitionData::_Internal {
 public:
  static const ::vearchpb::SearchRequest& search_request(const PartitionData* msg);
  static const ::vearchpb::SearchResponse& search_response(const PartitionData* msg);
  static const ::vearchpb::Error& err(const PartitionData* msg);
  static const ::vearchpb::DelByQueryeResponse& del_by_query_response(const PartitionData* msg);
  static const ::vearchpb::IndexRequest& index_request(const PartitionData* msg);
  static const ::vearchpb::IndexResponse& index_response(const PartitionData* msg);
  static const ::vearchpb::QueryRequest& query_request(const PartitionData* msg);
};

const ::vearchpb::SearchRequest&
PartitionData::_Internal::search_request(const PartitionData* msg) {
  return *msg->_impl_.search_request_;
}
const ::vearchpb::SearchResponse&
PartitionData::_Internal::search_response(const PartitionData* msg) {
  return *msg->_impl_.search_response_;
}
const ::vearchpb::Error&
PartitionData::_Internal::err(const PartitionData* msg) {
  return *msg->_impl_.err_;
}
const ::vearchpb::DelByQueryeResponse&
PartitionData::_Internal::del_by_query_response(const PartitionData* msg) {
  return *msg->_impl_.del_by_query_response_;
}
const ::vearchpb::IndexRequest&
PartitionData::_Internal::index_request(const PartitionData* msg) {
  return *msg->_impl_.index_request_;
}
const ::vearchpb::IndexResponse&
PartitionData::_Internal::index_response(const PartitionData* msg) {
  return *msg->_impl_.index_response_;
}
const ::vearchpb::QueryRequest&
PartitionData::_Internal::query_request(const PartitionData* msg) {
  return *msg->_impl_.query_request_;
}
void PartitionData::clear_items() {
  _impl_.items_.Clear();
}
void PartitionData::clear_search_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_request_ != nullptr) {
    delete _impl_.search_request_;
  }
  _impl_.search_request_ = nullptr;
}
void PartitionData::clear_search_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.search_response_ != nullptr) {
    delete _impl_.search_response_;
  }
  _impl_.search_response_ = nullptr;
}
void PartitionData::clear_err() {
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
}
void PartitionData::clear_del_by_query_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.del_by_query_response_ != nullptr) {
    delete _impl_.del_by_query_response_;
  }
  _impl_.del_by_query_response_ = nullptr;
}
void PartitionData::clear_index_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.index_request_ != nullptr) {
    delete _impl_.index_request_;
  }
  _impl_.index_request_ = nullptr;
}
void PartitionData::clear_index_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.index_response_ != nullptr) {
    delete _impl_.index_response_;
  }
  _impl_.index_response_ = nullptr;
}
void PartitionData::clear_query_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.query_request_ != nullptr) {
    delete _impl_.query_request_;
  }
  _impl_.query_request_ = nullptr;
}
PartitionData::PartitionData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.PartitionData)
}
PartitionData::PartitionData(const PartitionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartitionData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.messageid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.search_request_){nullptr}
    , decltype(_impl_.search_response_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , decltype(_impl_.del_by_query_response_){nullptr}
    , decltype(_impl_.index_request_){nullptr}
    , decltype(_impl_.index_response_){nullptr}
    , decltype(_impl_.query_request_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.partitionid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_messageid().empty()) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_search_request()) {
    _this->_impl_.search_request_ = new ::vearchpb::SearchRequest(*from._impl_.search_request_);
  }
  if (from._internal_has_search_response()) {
    _this->_impl_.search_response_ = new ::vearchpb::SearchResponse(*from._impl_.search_response_);
  }
  if (from._internal_has_err()) {
    _this->_impl_.err_ = new ::vearchpb::Error(*from._impl_.err_);
  }
  if (from._internal_has_del_by_query_response()) {
    _this->_impl_.del_by_query_response_ = new ::vearchpb::DelByQueryeResponse(*from._impl_.del_by_query_response_);
  }
  if (from._internal_has_index_request()) {
    _this->_impl_.index_request_ = new ::vearchpb::IndexRequest(*from._impl_.index_request_);
  }
  if (from._internal_has_index_response()) {
    _this->_impl_.index_response_ = new ::vearchpb::IndexResponse(*from._impl_.index_response_);
  }
  if (from._internal_has_query_request()) {
    _this->_impl_.query_request_ = new ::vearchpb::QueryRequest(*from._impl_.query_request_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.partitionid_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitionid_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.PartitionData)
}

inline void PartitionData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.messageid_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.search_request_){nullptr}
    , decltype(_impl_.search_response_){nullptr}
    , decltype(_impl_.err_){nullptr}
    , decltype(_impl_.del_by_query_response_){nullptr}
    , decltype(_impl_.index_request_){nullptr}
    , decltype(_impl_.index_response_){nullptr}
    , decltype(_impl_.query_request_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.partitionid_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartitionData::~PartitionData() {
  // @@protoc_insertion_point(destructor:vearchpb.PartitionData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartitionData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
  _impl_.messageid_.Destroy();
  _impl_.data_.Destroy();
  if (this != internal_default_instance()) delete _impl_.search_request_;
  if (this != internal_default_instance()) delete _impl_.search_response_;
  if (this != internal_default_instance()) delete _impl_.err_;
  if (this != internal_default_instance()) delete _impl_.del_by_query_response_;
  if (this != internal_default_instance()) delete _impl_.index_request_;
  if (this != internal_default_instance()) delete _impl_.index_response_;
  if (this != internal_default_instance()) delete _impl_.query_request_;
}

void PartitionData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartitionData::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.PartitionData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.messageid_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.search_request_ != nullptr) {
    delete _impl_.search_request_;
  }
  _impl_.search_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.search_response_ != nullptr) {
    delete _impl_.search_response_;
  }
  _impl_.search_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.err_ != nullptr) {
    delete _impl_.err_;
  }
  _impl_.err_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.del_by_query_response_ != nullptr) {
    delete _impl_.del_by_query_response_;
  }
  _impl_.del_by_query_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.index_request_ != nullptr) {
    delete _impl_.index_request_;
  }
  _impl_.index_request_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.index_response_ != nullptr) {
    delete _impl_.index_response_;
  }
  _impl_.index_response_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.query_request_ != nullptr) {
    delete _impl_.query_request_;
  }
  _impl_.query_request_ = nullptr;
  ::memset(&_impl_.type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.partitionid_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.partitionid_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartitionData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.OpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vearchpb::OpType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 partitionID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.partitionid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string messageID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "vearchpb.PartitionData.messageID"));
        } else
          goto handle_unusual;
        continue;
      // repeated .vearchpb.Item items = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.SearchRequest search_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.SearchResponse search_response = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_search_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.Error err = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_err(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.DelByQueryeResponse del_by_query_response = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_del_by_query_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.IndexRequest index_request = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.IndexResponse index_response = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_index_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.QueryRequest query_request = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_query_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartitionData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.PartitionData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.OpType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // uint32 partitionID = 2;
  if (this->_internal_partitionid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_partitionid(), target);
  }

  // string messageID = 3;
  if (!this->_internal_messageid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_messageid().data(), static_cast<int>(this->_internal_messageid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "vearchpb.PartitionData.messageID");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_messageid(), target);
  }

  // repeated .vearchpb.Item items = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .vearchpb.SearchRequest search_request = 5;
  if (this->_internal_has_search_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::search_request(this),
        _Internal::search_request(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.SearchResponse search_response = 6;
  if (this->_internal_has_search_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::search_response(this),
        _Internal::search_response(this).GetCachedSize(), target, stream);
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_data(), target);
  }

  // .vearchpb.Error err = 8;
  if (this->_internal_has_err()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::err(this),
        _Internal::err(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.DelByQueryeResponse del_by_query_response = 9;
  if (this->_internal_has_del_by_query_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::del_by_query_response(this),
        _Internal::del_by_query_response(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.IndexRequest index_request = 10;
  if (this->_internal_has_index_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::index_request(this),
        _Internal::index_request(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.IndexResponse index_response = 11;
  if (this->_internal_has_index_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::index_response(this),
        _Internal::index_response(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.QueryRequest query_request = 12;
  if (this->_internal_has_query_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::query_request(this),
        _Internal::query_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.PartitionData)
  return target;
}

size_t PartitionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.PartitionData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .vearchpb.Item items = 4;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string messageID = 3;
  if (!this->_internal_messageid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_messageid());
  }

  // bytes data = 7;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .vearchpb.SearchRequest search_request = 5;
  if (this->_internal_has_search_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_request_);
  }

  // .vearchpb.SearchResponse search_response = 6;
  if (this->_internal_has_search_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.search_response_);
  }

  // .vearchpb.Error err = 8;
  if (this->_internal_has_err()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.err_);
  }

  // .vearchpb.DelByQueryeResponse del_by_query_response = 9;
  if (this->_internal_has_del_by_query_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.del_by_query_response_);
  }

  // .vearchpb.IndexRequest index_request = 10;
  if (this->_internal_has_index_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_request_);
  }

  // .vearchpb.IndexResponse index_response = 11;
  if (this->_internal_has_index_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.index_response_);
  }

  // .vearchpb.QueryRequest query_request = 12;
  if (this->_internal_has_query_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.query_request_);
  }

  // .vearchpb.OpType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 partitionID = 2;
  if (this->_internal_partitionid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_partitionid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartitionData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartitionData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartitionData::GetClassData() const { return &_class_data_; }


void PartitionData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartitionData*>(&to_msg);
  auto& from = static_cast<const PartitionData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.PartitionData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (!from._internal_messageid().empty()) {
    _this->_internal_set_messageid(from._internal_messageid());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_has_search_request()) {
    _this->_internal_mutable_search_request()->::vearchpb::SearchRequest::MergeFrom(
        from._internal_search_request());
  }
  if (from._internal_has_search_response()) {
    _this->_internal_mutable_search_response()->::vearchpb::SearchResponse::MergeFrom(
        from._internal_search_response());
  }
  if (from._internal_has_err()) {
    _this->_internal_mutable_err()->::vearchpb::Error::MergeFrom(
        from._internal_err());
  }
  if (from._internal_has_del_by_query_response()) {
    _this->_internal_mutable_del_by_query_response()->::vearchpb::DelByQueryeResponse::MergeFrom(
        from._internal_del_by_query_response());
  }
  if (from._internal_has_index_request()) {
    _this->_internal_mutable_index_request()->::vearchpb::IndexRequest::MergeFrom(
        from._internal_index_request());
  }
  if (from._internal_has_index_response()) {
    _this->_internal_mutable_index_response()->::vearchpb::IndexResponse::MergeFrom(
        from._internal_index_response());
  }
  if (from._internal_has_query_request()) {
    _this->_internal_mutable_query_request()->::vearchpb::QueryRequest::MergeFrom(
        from._internal_query_request());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_partitionid() != 0) {
    _this->_internal_set_partitionid(from._internal_partitionid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartitionData::CopyFrom(const PartitionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.PartitionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionData::IsInitialized() const {
  return true;
}

void PartitionData::InternalSwap(PartitionData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.messageid_, lhs_arena,
      &other->_impl_.messageid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PartitionData, _impl_.partitionid_)
      + sizeof(PartitionData::_impl_.partitionid_)
      - PROTOBUF_FIELD_OFFSET(PartitionData, _impl_.search_request_)>(
          reinterpret_cast<char*>(&_impl_.search_request_),
          reinterpret_cast<char*>(&other->_impl_.search_request_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PartitionData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftcmd_2eproto_getter, &descriptor_table_raftcmd_2eproto_once,
      file_level_metadata_raftcmd_2eproto[0]);
}

// ===================================================================

class UpdateSpace::_Internal {
 public:
};

UpdateSpace::UpdateSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.UpdateSpace)
}
UpdateSpace::UpdateSpace(const UpdateSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateSpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.space_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.space_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.space_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_space().empty()) {
    _this->_impl_.space_.Set(from._internal_space(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.UpdateSpace)
}

inline void UpdateSpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.space_){}
    , decltype(_impl_.version_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.space_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.space_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateSpace::~UpdateSpace() {
  // @@protoc_insertion_point(destructor:vearchpb.UpdateSpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.space_.Destroy();
}

void UpdateSpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.UpdateSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.space_.ClearToEmpty();
  _impl_.version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes Space = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_space();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.UpdateSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes Space = 1;
  if (!this->_internal_space().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_space(), target);
  }

  // uint64 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.UpdateSpace)
  return target;
}

size_t UpdateSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.UpdateSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes Space = 1;
  if (!this->_internal_space().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_space());
  }

  // uint64 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSpace::GetClassData() const { return &_class_data_; }


void UpdateSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateSpace*>(&to_msg);
  auto& from = static_cast<const UpdateSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.UpdateSpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_space().empty()) {
    _this->_internal_set_space(from._internal_space());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSpace::CopyFrom(const UpdateSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.UpdateSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSpace::IsInitialized() const {
  return true;
}

void UpdateSpace::InternalSwap(UpdateSpace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.space_, lhs_arena,
      &other->_impl_.space_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftcmd_2eproto_getter, &descriptor_table_raftcmd_2eproto_once,
      file_level_metadata_raftcmd_2eproto[1]);
}

// ===================================================================

class DocCmd::_Internal {
 public:
};

DocCmd::DocCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.DocCmd)
}
DocCmd::DocCmd(const DocCmd& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DocCmd* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.docs_){from._impl_.docs_}
    , decltype(_impl_.doc_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.slot_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_doc().empty()) {
    _this->_impl_.doc_.Set(from._internal_doc(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.slot_));
  // @@protoc_insertion_point(copy_constructor:vearchpb.DocCmd)
}

inline void DocCmd::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.docs_){arena}
    , decltype(_impl_.doc_){}
    , decltype(_impl_.version_){int64_t{0}}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.slot_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.doc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.doc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DocCmd::~DocCmd() {
  // @@protoc_insertion_point(destructor:vearchpb.DocCmd)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DocCmd::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.docs_.~RepeatedPtrField();
  _impl_.doc_.Destroy();
}

void DocCmd::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DocCmd::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.DocCmd)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.docs_.Clear();
  _impl_.doc_.ClearToEmpty();
  ::memset(&_impl_.version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slot_) -
      reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.slot_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DocCmd::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.OpType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vearchpb::OpType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 slot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes doc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_doc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated bytes docs = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_docs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DocCmd::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.DocCmd)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.OpType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int64 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_version(), target);
  }

  // uint32 slot = 5;
  if (this->_internal_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_slot(), target);
  }

  // bytes doc = 7;
  if (!this->_internal_doc().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_doc(), target);
  }

  // repeated bytes docs = 8;
  for (int i = 0, n = this->_internal_docs_size(); i < n; i++) {
    const auto& s = this->_internal_docs(i);
    target = stream->WriteBytes(8, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.DocCmd)
  return target;
}

size_t DocCmd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.DocCmd)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes docs = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.docs_.size());
  for (int i = 0, n = _impl_.docs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      _impl_.docs_.Get(i));
  }

  // bytes doc = 7;
  if (!this->_internal_doc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_doc());
  }

  // int64 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  // .vearchpb.OpType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 slot = 5;
  if (this->_internal_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_slot());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DocCmd::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DocCmd::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DocCmd::GetClassData() const { return &_class_data_; }


void DocCmd::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DocCmd*>(&to_msg);
  auto& from = static_cast<const DocCmd&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.DocCmd)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.docs_.MergeFrom(from._impl_.docs_);
  if (!from._internal_doc().empty()) {
    _this->_internal_set_doc(from._internal_doc());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_slot() != 0) {
    _this->_internal_set_slot(from._internal_slot());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DocCmd::CopyFrom(const DocCmd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.DocCmd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocCmd::IsInitialized() const {
  return true;
}

void DocCmd::InternalSwap(DocCmd* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.docs_.InternalSwap(&other->_impl_.docs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.doc_, lhs_arena,
      &other->_impl_.doc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DocCmd, _impl_.slot_)
      + sizeof(DocCmd::_impl_.slot_)
      - PROTOBUF_FIELD_OFFSET(DocCmd, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DocCmd::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftcmd_2eproto_getter, &descriptor_table_raftcmd_2eproto_once,
      file_level_metadata_raftcmd_2eproto[2]);
}

// ===================================================================

class RaftCommand::_Internal {
 public:
  static const ::vearchpb::DocCmd& write_command(const RaftCommand* msg);
  static const ::vearchpb::UpdateSpace& update_space(const RaftCommand* msg);
};

const ::vearchpb::DocCmd&
RaftCommand::_Internal::write_command(const RaftCommand* msg) {
  return *msg->_impl_.write_command_;
}
const ::vearchpb::UpdateSpace&
RaftCommand::_Internal::update_space(const RaftCommand* msg) {
  return *msg->_impl_.update_space_;
}
RaftCommand::RaftCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.RaftCommand)
}
RaftCommand::RaftCommand(const RaftCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RaftCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.write_command_){nullptr}
    , decltype(_impl_.update_space_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_write_command()) {
    _this->_impl_.write_command_ = new ::vearchpb::DocCmd(*from._impl_.write_command_);
  }
  if (from._internal_has_update_space()) {
    _this->_impl_.update_space_ = new ::vearchpb::UpdateSpace(*from._impl_.update_space_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:vearchpb.RaftCommand)
}

inline void RaftCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.write_command_){nullptr}
    , decltype(_impl_.update_space_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RaftCommand::~RaftCommand() {
  // @@protoc_insertion_point(destructor:vearchpb.RaftCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RaftCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.write_command_;
  if (this != internal_default_instance()) delete _impl_.update_space_;
}

void RaftCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RaftCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.RaftCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.write_command_ != nullptr) {
    delete _impl_.write_command_;
  }
  _impl_.write_command_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.update_space_ != nullptr) {
    delete _impl_.update_space_;
  }
  _impl_.update_space_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaftCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .vearchpb.CmdType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::vearchpb::CmdType>(val));
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.DocCmd write_command = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_write_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .vearchpb.UpdateSpace update_space = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_space(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RaftCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.RaftCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .vearchpb.CmdType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .vearchpb.DocCmd write_command = 2;
  if (this->_internal_has_write_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::write_command(this),
        _Internal::write_command(this).GetCachedSize(), target, stream);
  }

  // .vearchpb.UpdateSpace update_space = 3;
  if (this->_internal_has_update_space()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::update_space(this),
        _Internal::update_space(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.RaftCommand)
  return target;
}

size_t RaftCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.RaftCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .vearchpb.DocCmd write_command = 2;
  if (this->_internal_has_write_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.write_command_);
  }

  // .vearchpb.UpdateSpace update_space = 3;
  if (this->_internal_has_update_space()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.update_space_);
  }

  // .vearchpb.CmdType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RaftCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RaftCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RaftCommand::GetClassData() const { return &_class_data_; }


void RaftCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RaftCommand*>(&to_msg);
  auto& from = static_cast<const RaftCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.RaftCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_write_command()) {
    _this->_internal_mutable_write_command()->::vearchpb::DocCmd::MergeFrom(
        from._internal_write_command());
  }
  if (from._internal_has_update_space()) {
    _this->_internal_mutable_update_space()->::vearchpb::UpdateSpace::MergeFrom(
        from._internal_update_space());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RaftCommand::CopyFrom(const RaftCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.RaftCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaftCommand::IsInitialized() const {
  return true;
}

void RaftCommand::InternalSwap(RaftCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaftCommand, _impl_.type_)
      + sizeof(RaftCommand::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(RaftCommand, _impl_.write_command_)>(
          reinterpret_cast<char*>(&_impl_.write_command_),
          reinterpret_cast<char*>(&other->_impl_.write_command_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaftCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftcmd_2eproto_getter, &descriptor_table_raftcmd_2eproto_once,
      file_level_metadata_raftcmd_2eproto[3]);
}

// ===================================================================

class SnapData::_Internal {
 public:
};

SnapData::SnapData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:vearchpb.SnapData)
}
SnapData::SnapData(const SnapData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:vearchpb.SnapData)
}

inline void SnapData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapData::~SnapData() {
  // @@protoc_insertion_point(destructor:vearchpb.SnapData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void SnapData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapData::Clear() {
// @@protoc_insertion_point(message_clear_start:vearchpb.SnapData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:vearchpb.SnapData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:vearchpb.SnapData)
  return target;
}

size_t SnapData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:vearchpb.SnapData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapData::GetClassData() const { return &_class_data_; }


void SnapData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapData*>(&to_msg);
  auto& from = static_cast<const SnapData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:vearchpb.SnapData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapData::CopyFrom(const SnapData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:vearchpb.SnapData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapData::IsInitialized() const {
  return true;
}

void SnapData::InternalSwap(SnapData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_raftcmd_2eproto_getter, &descriptor_table_raftcmd_2eproto_once,
      file_level_metadata_raftcmd_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace vearchpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::vearchpb::PartitionData*
Arena::CreateMaybeMessage< ::vearchpb::PartitionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::PartitionData >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::UpdateSpace*
Arena::CreateMaybeMessage< ::vearchpb::UpdateSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::UpdateSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::DocCmd*
Arena::CreateMaybeMessage< ::vearchpb::DocCmd >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::DocCmd >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::RaftCommand*
Arena::CreateMaybeMessage< ::vearchpb::RaftCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::RaftCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::vearchpb::SnapData*
Arena::CreateMaybeMessage< ::vearchpb::SnapData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::vearchpb::SnapData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
