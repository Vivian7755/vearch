// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v3.21.0
// source: errors.proto

package vearchpb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ErrorEnum int32

const (
	// basic 0-99
	ErrorEnum_SUCCESS               ErrorEnum = 0
	ErrorEnum_INTERNAL_ERROR        ErrorEnum = 1
	ErrorEnum_UNKNOWN_ERROR         ErrorEnum = 2
	ErrorEnum_AUTHENTICATION_FAILED ErrorEnum = 3
	ErrorEnum_RECOVER               ErrorEnum = 4
	ErrorEnum_TIMEOUT               ErrorEnum = 5
	ErrorEnum_PARAM_ERROR           ErrorEnum = 6
	ErrorEnum_CONFIG_ERROR          ErrorEnum = 7
	// cluster 100-199
	// master 100-119
	ErrorEnum_MASTER_PS_NOT_ENOUGH_SELECT ErrorEnum = 100
	// router 120-139
	ErrorEnum_ROUTER_NO_PS_CLIENT    ErrorEnum = 120
	ErrorEnum_ROUTER_CALL_PS_RPC_ERR ErrorEnum = 121
	// partition server 140-159
	ErrorEnum_PARTITION_EXIST              ErrorEnum = 140
	ErrorEnum_PARTITION_NOT_EXIST          ErrorEnum = 141
	ErrorEnum_PARTITION_NOT_LEADER         ErrorEnum = 142
	ErrorEnum_PARTITION_NO_LEADER          ErrorEnum = 143
	ErrorEnum_PARTITION_IS_INVALID         ErrorEnum = 144
	ErrorEnum_PARTITION_IS_CLOSED          ErrorEnum = 145
	ErrorEnum_PARTITION_RESOURCE_EXHAUSTED ErrorEnum = 146
	// server 160-179
	ErrorEnum_PARTITION_SERVER_NOT_EXIST ErrorEnum = 160
	ErrorEnum_PARTITION_SERVER_ERROR     ErrorEnum = 161
	// user 180-190
	ErrorEnum_USER_NOT_EXIST ErrorEnum = 180
	ErrorEnum_USER_EXIST     ErrorEnum = 181
	// role 190-199
	ErrorEnum_ROLE_NOT_EXIST ErrorEnum = 190
	ErrorEnum_ROLE_EXIST     ErrorEnum = 191
	// schema 200-399
	// db 200-219
	ErrorEnum_DB_NOT_EXIST ErrorEnum = 200
	ErrorEnum_DB_EXIST     ErrorEnum = 201
	ErrorEnum_DB_NOT_EMPTY ErrorEnum = 202
	// space 220-239
	ErrorEnum_SPACE_EXIST     ErrorEnum = 220
	ErrorEnum_SPACE_NOT_EXIST ErrorEnum = 221
	// alias 240-259
	ErrorEnum_ALIAS_NOT_EXIST ErrorEnum = 240
	ErrorEnum_ALIAS_EXIST     ErrorEnum = 241
	// document 260-279
	ErrorEnum_DOCUMENT_NOT_EXIST     ErrorEnum = 260
	ErrorEnum_PRIMARY_KEY_IS_INVALID ErrorEnum = 261
	// filter 300-319
	ErrorEnum_FILTER_OPERATOR_TYPE_ERR           ErrorEnum = 300
	ErrorEnum_FILTER_CONDITION_OPERATOR_TYPE_ERR ErrorEnum = 301
	// data interface 400-499
	// document upsert 400-419
	ErrorEnum_UPSERT_INVALID_PARAMS ErrorEnum = 400
	// document delete 420-439
	ErrorEnum_DELETE_BY_QUERY_SERACH_ERR                                      ErrorEnum = 420
	ErrorEnum_DELETE_BY_QUERY_SEARCH_ID_IS_0                                  ErrorEnum = 421
	ErrorEnum_DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD              ErrorEnum = 422
	ErrorEnum_DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR              ErrorEnum = 423
	ErrorEnum_DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500         ErrorEnum = 424
	ErrorEnum_DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER ErrorEnum = 425
	// document query 440-459
	ErrorEnum_QUERY_ENGINE_ERR                                               ErrorEnum = 440
	ErrorEnum_QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500         ErrorEnum = 441
	ErrorEnum_QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER ErrorEnum = 442
	ErrorEnum_QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD              ErrorEnum = 443
	ErrorEnum_QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER              ErrorEnum = 444
	ErrorEnum_QUERY_RESPONSE_PARSE_ERR                                       ErrorEnum = 445
	// document search 460-479
	ErrorEnum_SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD ErrorEnum = 460
	ErrorEnum_SEARCH_ENGINE_ERR                              ErrorEnum = 461
	ErrorEnum_SEARCH_RESPONSE_PARSE_ERR                      ErrorEnum = 462
	// index interface 500-599
	ErrorEnum_FORCE_MERGE_BUILD_INDEX_ERR ErrorEnum = 500
	// meta interface 600-699
	// flush
	ErrorEnum_FLUSH_ERR ErrorEnum = 600
	// service 700
	ErrorEnum_SERVICE_UNAVAILABLE     ErrorEnum = 700
	ErrorEnum_RPC_PARAM_ERROR         ErrorEnum = 701
	ErrorEnum_METHOD_NOT_IMPLEMENT    ErrorEnum = 702
	ErrorEnum_CREATE_RPCCLIENT_FAILED ErrorEnum = 703
	ErrorEnum_CALL_RPCCLIENT_FAILED   ErrorEnum = 704
)

// Enum value maps for ErrorEnum.
var (
	ErrorEnum_name = map[int32]string{
		0:   "SUCCESS",
		1:   "INTERNAL_ERROR",
		2:   "UNKNOWN_ERROR",
		3:   "AUTHENTICATION_FAILED",
		4:   "RECOVER",
		5:   "TIMEOUT",
		6:   "PARAM_ERROR",
		7:   "CONFIG_ERROR",
		100: "MASTER_PS_NOT_ENOUGH_SELECT",
		120: "ROUTER_NO_PS_CLIENT",
		121: "ROUTER_CALL_PS_RPC_ERR",
		140: "PARTITION_EXIST",
		141: "PARTITION_NOT_EXIST",
		142: "PARTITION_NOT_LEADER",
		143: "PARTITION_NO_LEADER",
		144: "PARTITION_IS_INVALID",
		145: "PARTITION_IS_CLOSED",
		146: "PARTITION_RESOURCE_EXHAUSTED",
		160: "PARTITION_SERVER_NOT_EXIST",
		161: "PARTITION_SERVER_ERROR",
		180: "USER_NOT_EXIST",
		181: "USER_EXIST",
		190: "ROLE_NOT_EXIST",
		191: "ROLE_EXIST",
		200: "DB_NOT_EXIST",
		201: "DB_EXIST",
		202: "DB_NOT_EMPTY",
		220: "SPACE_EXIST",
		221: "SPACE_NOT_EXIST",
		240: "ALIAS_NOT_EXIST",
		241: "ALIAS_EXIST",
		260: "DOCUMENT_NOT_EXIST",
		261: "PRIMARY_KEY_IS_INVALID",
		300: "FILTER_OPERATOR_TYPE_ERR",
		301: "FILTER_CONDITION_OPERATOR_TYPE_ERR",
		400: "UPSERT_INVALID_PARAMS",
		420: "DELETE_BY_QUERY_SERACH_ERR",
		421: "DELETE_BY_QUERY_SEARCH_ID_IS_0",
		422: "DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD",
		423: "DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR",
		424: "DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500",
		425: "DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER",
		440: "QUERY_ENGINE_ERR",
		441: "QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500",
		442: "QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER",
		443: "QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD",
		444: "QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER",
		445: "QUERY_RESPONSE_PARSE_ERR",
		460: "SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD",
		461: "SEARCH_ENGINE_ERR",
		462: "SEARCH_RESPONSE_PARSE_ERR",
		500: "FORCE_MERGE_BUILD_INDEX_ERR",
		600: "FLUSH_ERR",
		700: "SERVICE_UNAVAILABLE",
		701: "RPC_PARAM_ERROR",
		702: "METHOD_NOT_IMPLEMENT",
		703: "CREATE_RPCCLIENT_FAILED",
		704: "CALL_RPCCLIENT_FAILED",
	}
	ErrorEnum_value = map[string]int32{
		"SUCCESS":                            0,
		"INTERNAL_ERROR":                     1,
		"UNKNOWN_ERROR":                      2,
		"AUTHENTICATION_FAILED":              3,
		"RECOVER":                            4,
		"TIMEOUT":                            5,
		"PARAM_ERROR":                        6,
		"CONFIG_ERROR":                       7,
		"MASTER_PS_NOT_ENOUGH_SELECT":        100,
		"ROUTER_NO_PS_CLIENT":                120,
		"ROUTER_CALL_PS_RPC_ERR":             121,
		"PARTITION_EXIST":                    140,
		"PARTITION_NOT_EXIST":                141,
		"PARTITION_NOT_LEADER":               142,
		"PARTITION_NO_LEADER":                143,
		"PARTITION_IS_INVALID":               144,
		"PARTITION_IS_CLOSED":                145,
		"PARTITION_RESOURCE_EXHAUSTED":       146,
		"PARTITION_SERVER_NOT_EXIST":         160,
		"PARTITION_SERVER_ERROR":             161,
		"USER_NOT_EXIST":                     180,
		"USER_EXIST":                         181,
		"ROLE_NOT_EXIST":                     190,
		"ROLE_EXIST":                         191,
		"DB_NOT_EXIST":                       200,
		"DB_EXIST":                           201,
		"DB_NOT_EMPTY":                       202,
		"SPACE_EXIST":                        220,
		"SPACE_NOT_EXIST":                    221,
		"ALIAS_NOT_EXIST":                    240,
		"ALIAS_EXIST":                        241,
		"DOCUMENT_NOT_EXIST":                 260,
		"PRIMARY_KEY_IS_INVALID":             261,
		"FILTER_OPERATOR_TYPE_ERR":           300,
		"FILTER_CONDITION_OPERATOR_TYPE_ERR": 301,
		"UPSERT_INVALID_PARAMS":              400,
		"DELETE_BY_QUERY_SERACH_ERR":         420,
		"DELETE_BY_QUERY_SEARCH_ID_IS_0":     421,
		"DELETE_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD":              422,
		"DELETE_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_VECTOR":              423,
		"DELETE_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500":         424,
		"DELETE_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER": 425,
		"QUERY_ENGINE_ERR": 440,
		"QUERY_INVALID_PARAMS_LENGTH_OF_DOCUMENT_IDS_BEYOND_500":         441,
		"QUERY_INVALID_PARAMS_SHOULD_HAVE_ONE_OF_DOCUMENT_IDS_OR_FILTER": 442,
		"QUERY_INVALID_PARAMS_SHOULD_NOT_HAVE_VECTOR_FIELD":              443,
		"QUERY_INVALID_PARAMS_BOTH_DOCUMENT_IDS_AND_FILTER":              444,
		"QUERY_RESPONSE_PARSE_ERR":                                       445,
		"SEARCH_INVALID_PARAMS_SHOULD_HAVE_VECTOR_FIELD":                 460,
		"SEARCH_ENGINE_ERR":           461,
		"SEARCH_RESPONSE_PARSE_ERR":   462,
		"FORCE_MERGE_BUILD_INDEX_ERR": 500,
		"FLUSH_ERR":                   600,
		"SERVICE_UNAVAILABLE":         700,
		"RPC_PARAM_ERROR":             701,
		"METHOD_NOT_IMPLEMENT":        702,
		"CREATE_RPCCLIENT_FAILED":     703,
		"CALL_RPCCLIENT_FAILED":       704,
	}
)

func (x ErrorEnum) Enum() *ErrorEnum {
	p := new(ErrorEnum)
	*p = x
	return p
}

func (x ErrorEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_errors_proto_enumTypes[0].Descriptor()
}

func (ErrorEnum) Type() protoreflect.EnumType {
	return &file_errors_proto_enumTypes[0]
}

func (x ErrorEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorEnum.Descriptor instead.
func (ErrorEnum) EnumDescriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code ErrorEnum `protobuf:"varint,1,opt,name=code,proto3,enum=vearchpb.ErrorEnum" json:"code,omitempty"`
	Msg  string    `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_errors_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_errors_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_errors_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() ErrorEnum {
	if x != nil {
		return x.Code
	}
	return ErrorEnum_SUCCESS
}

func (x *Error) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_errors_proto protoreflect.FileDescriptor

var file_errors_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x22, 0x42, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x2a, 0xdb, 0x0d, 0x0a,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x19,
	0x0a, 0x15, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x43,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55,
	0x54, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x53,
	0x45, 0x4c, 0x45, 0x43, 0x54, 0x10, 0x64, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x4f, 0x55, 0x54, 0x45,
	0x52, 0x5f, 0x4e, 0x4f, 0x5f, 0x50, 0x53, 0x5f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x78,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x55, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f,
	0x50, 0x53, 0x5f, 0x52, 0x50, 0x43, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x79, 0x12, 0x14, 0x0a, 0x0f,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0x8c, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x8d, 0x01, 0x12, 0x19, 0x0a, 0x14,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x10, 0x8e, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x50, 0x41, 0x52, 0x54, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x10, 0x8f,
	0x01, 0x12, 0x19, 0x0a, 0x14, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49,
	0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x90, 0x01, 0x12, 0x18, 0x0a, 0x13,
	0x50, 0x41, 0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x44, 0x10, 0x91, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x50, 0x41, 0x52, 0x54, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x45, 0x58, 0x48,
	0x41, 0x55, 0x53, 0x54, 0x45, 0x44, 0x10, 0x92, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x50, 0x41, 0x52,
	0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xa0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x41,
	0x52, 0x54, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0xa1, 0x01, 0x12, 0x13, 0x0a, 0x0e, 0x55, 0x53, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb4, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x55, 0x53, 0x45, 0x52, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xb5, 0x01, 0x12, 0x13, 0x0a,
	0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10,
	0xbe, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x10, 0xbf, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xc8, 0x01, 0x12, 0x0d, 0x0a, 0x08, 0x44, 0x42, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x10, 0xc9, 0x01, 0x12, 0x11, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0xca, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x53, 0x50, 0x41, 0x43,
	0x45, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xdc, 0x01, 0x12, 0x14, 0x0a, 0x0f, 0x53, 0x50,
	0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xdd, 0x01,
	0x12, 0x14, 0x0a, 0x0f, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58,
	0x49, 0x53, 0x54, 0x10, 0xf0, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x41, 0x4c, 0x49, 0x41, 0x53, 0x5f,
	0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0xf1, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x10, 0x84,
	0x02, 0x12, 0x1b, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x85, 0x02, 0x12, 0x1d,
	0x0a, 0x18, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x10, 0xac, 0x02, 0x12, 0x27, 0x0a,
	0x22, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xad, 0x02, 0x12, 0x1a, 0x0a, 0x15, 0x55, 0x50, 0x53, 0x45, 0x52, 0x54,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x10,
	0x90, 0x03, 0x12, 0x1f, 0x0a, 0x1a, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x59, 0x5f,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x41, 0x43, 0x48, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0xa4, 0x03, 0x12, 0x23, 0x0a, 0x1e, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x42, 0x59,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x49, 0x44,
	0x5f, 0x49, 0x53, 0x5f, 0x30, 0x10, 0xa5, 0x03, 0x12, 0x37, 0x0a, 0x32, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x53, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56,
	0x45, 0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xa6,
	0x03, 0x12, 0x37, 0x0a, 0x32, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f,
	0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x10, 0xa7, 0x03, 0x12, 0x3c, 0x0a, 0x37, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x53, 0x5f, 0x4c, 0x45, 0x4e, 0x47, 0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e,
	0x44, 0x5f, 0x35, 0x30, 0x30, 0x10, 0xa8, 0x03, 0x12, 0x44, 0x0a, 0x3f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x53, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x4f, 0x4e,
	0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44,
	0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x4c, 0x54, 0x45, 0x52, 0x10, 0xa9, 0x03, 0x12, 0x15,
	0x0a, 0x10, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xb8, 0x03, 0x12, 0x3b, 0x0a, 0x36, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x49, 0x44, 0x53, 0x5f, 0x42, 0x45, 0x59, 0x4f, 0x4e, 0x44, 0x5f, 0x35, 0x30, 0x30, 0x10,
	0xb9, 0x03, 0x12, 0x43, 0x0a, 0x3e, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41,
	0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x53, 0x48, 0x4f, 0x55, 0x4c,
	0x44, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x4f, 0x46, 0x5f, 0x44, 0x4f,
	0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x10, 0xba, 0x03, 0x12, 0x36, 0x0a, 0x31, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f,
	0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f,
	0x56, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xbb, 0x03, 0x12,
	0x36, 0x0a, 0x31, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f, 0x42, 0x4f, 0x54, 0x48, 0x5f, 0x44, 0x4f, 0x43,
	0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x44, 0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x10, 0xbc, 0x03, 0x12, 0x1d, 0x0a, 0x18, 0x51, 0x55, 0x45, 0x52, 0x59,
	0x5f, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f,
	0x45, 0x52, 0x52, 0x10, 0xbd, 0x03, 0x12, 0x33, 0x0a, 0x2e, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x53, 0x5f,
	0x53, 0x48, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x48, 0x41, 0x56, 0x45, 0x5f, 0x56, 0x45, 0x43, 0x54,
	0x4f, 0x52, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x10, 0xcc, 0x03, 0x12, 0x16, 0x0a, 0x11, 0x53,
	0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x45, 0x4e, 0x47, 0x49, 0x4e, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0xcd, 0x03, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x53, 0x45, 0x5f, 0x45, 0x52, 0x52,
	0x10, 0xce, 0x03, 0x12, 0x20, 0x0a, 0x1b, 0x46, 0x4f, 0x52, 0x43, 0x45, 0x5f, 0x4d, 0x45, 0x52,
	0x47, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xf4, 0x03, 0x12, 0x0e, 0x0a, 0x09, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x5f, 0x45,
	0x52, 0x52, 0x10, 0xd8, 0x04, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45,
	0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0xbc, 0x05, 0x12,
	0x14, 0x0a, 0x0f, 0x52, 0x50, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xbd, 0x05, 0x12, 0x19, 0x0a, 0x14, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0xbe, 0x05,
	0x12, 0x1c, 0x0a, 0x17, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x50, 0x43, 0x43, 0x4c,
	0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xbf, 0x05, 0x12, 0x1a,
	0x0a, 0x15, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x52, 0x50, 0x43, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0xc0, 0x05, 0x42, 0x0e, 0x48, 0x01, 0x5a, 0x0a,
	0x2e, 0x2f, 0x76, 0x65, 0x61, 0x72, 0x63, 0x68, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_errors_proto_rawDescOnce sync.Once
	file_errors_proto_rawDescData = file_errors_proto_rawDesc
)

func file_errors_proto_rawDescGZIP() []byte {
	file_errors_proto_rawDescOnce.Do(func() {
		file_errors_proto_rawDescData = protoimpl.X.CompressGZIP(file_errors_proto_rawDescData)
	})
	return file_errors_proto_rawDescData
}

var file_errors_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_errors_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_errors_proto_goTypes = []interface{}{
	(ErrorEnum)(0), // 0: vearchpb.ErrorEnum
	(*Error)(nil),  // 1: vearchpb.Error
}
var file_errors_proto_depIdxs = []int32{
	0, // 0: vearchpb.Error.code:type_name -> vearchpb.ErrorEnum
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_errors_proto_init() }
func file_errors_proto_init() {
	if File_errors_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_errors_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_errors_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_errors_proto_goTypes,
		DependencyIndexes: file_errors_proto_depIdxs,
		EnumInfos:         file_errors_proto_enumTypes,
		MessageInfos:      file_errors_proto_msgTypes,
	}.Build()
	File_errors_proto = out.File
	file_errors_proto_rawDesc = nil
	file_errors_proto_goTypes = nil
	file_errors_proto_depIdxs = nil
}
